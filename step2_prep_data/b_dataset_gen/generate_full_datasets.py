from argparse import ArgumentParser
from pathlib import Path

import pandas as pd


def get_parser():
    argparser = ArgumentParser()

    argparser.add_argument(
        '-c', "--clinical_data", required=True, type=Path,
        help="A `.tsv` file containing a set of clinical metrics, including a patient identifier (GRP); this should "
             "be generated by the prior subset `a_clinical_data`."
    )

    argparser.add_argument(
        '-m', '--mri_path', required=True, type=Path,
        help="A path to a directory containing `.tsv` files, one per set of MRI-derived metrics generated in the "
             "previous step, `step1_process_mri/b_stack_metrics`."
    )

    return argparser


def clean_grps(df):
    new_df = df.copy()
    new_df['GRP'] = [int(x.split('cMRI')[-1]) for x in df['GRP']]
    return new_df


def main(clinical_data: Path, mri_path: Path):
    # Load the clinical dataset
    clinical_df = pd.read_csv(clinical_data, sep='\t')

    clinical_df = clean_grps(clinical_df).set_index('GRP')

    # Isolate the "target" feature (Recovery Ratio) for ease of use
    target_df = clinical_df.loc[:, ['Recovery Class']]
    clinical_df.drop(['Recovery Class'], axis=1, inplace=True)

    # Load each imaging dataset
    mri_dfs = {
        f.name.split('.')[0]: clean_grps(pd.read_csv(f, sep='\t')).set_index('GRP')
        for f in mri_path.glob('*.tsv')
    }

    # Generate a "joined" dataset for each MRI DF, which extends it with clinical data
    full_dfs = {k: v.join(clinical_df, how='inner') for k, v in mri_dfs.items()}

    # TODO


if __name__ == '__main__':
    parser = get_parser()
    argvs = parser.parse_args().__dict__

    main(**argvs)
